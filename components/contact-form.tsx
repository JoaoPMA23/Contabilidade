﻿﻿'use cl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ent';

 [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) mport { FormEvent, useState } from "react";
 [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) mport { F [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ArrowR [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ght } from "react- [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) cons/f [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ";

type FormState = {
  name: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  phone: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  subject: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  message: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  honeypot: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
};

type Subm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ss [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) onStatus = " [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) dle" | "load [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng" | "success" | "error";

const  [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) n [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) alState: FormState = {
  name: "",
  ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const ap [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) BaseUrl =
  process.env.NEXT_PUBL [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) C_AP [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) _BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPO [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) NT = `${ap [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) BaseUrl}/ap [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) /lead`;

type ContactFormProps = {
  defaultSubject?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  subjectLabel?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  subjectPlaceholder?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  messagePlaceholder?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  subm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) tLabel?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  successMessage?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  errorMessage?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  context?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
};

export default funct [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) on ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cen [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) r [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) o atual e objet [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) vos.",
  subm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) tLabel = "Env [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "N [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) o fo [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
))  poss [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) vel env [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ar sua mensagem. Tente novamente em  [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) nstantes.",
  context,
}: ContactFormProps) {
  const create [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) n [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) alFormState = () =>
    ({
      ... [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) n [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) alState,
      subject: defaultSubject,
    }) sat [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) sf [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) es FormState;

  const [form, setForm] = useState<FormState>(() => create [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) n [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) alFormState());
  const [status, setStatus] = useState<Subm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ss [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) onStatus>(" [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) dle");
  const [feedback, setFeedback] = useState<str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng>("");

  async funct [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) on handleSubm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

     [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) f (form.honeypot.tr [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) m()) {
      // Honeypot preench [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) do  [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) nd [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ca prov [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) vel bot; n [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) o env [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) a.
      return;
    }

    setStatus("load [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng");
    setFeedback("");

    try {
      const response = awa [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t fetch(LEAD_ENDPO [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) NT, {
        method: "POST",
        headers: {
          "Content-Type": "appl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) cat [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) on/json",
        },
        body: JSON.str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) fy({
          name: form.name,
          ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l: form.ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

       [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) f (!response.ok) {
        throw new Error(`AP [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
))  retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(create [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) n [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) alFormState());
    } catch (error) {
      console.error("Falha ao env [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t={handleSubm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t}
      className="rounded-3xl border border-slate-200 bg-wh [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) te p-8 shadow-lg shadow-slate-200/60"
    >
      <d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) v className="gr [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) d gap-4 md:gr [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) d-cols-2">
        <TextF [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) eld
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red
        />
        <TextF [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) eld
          label="E-ma [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l"
          name="ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l"
          placeholder="voce@empresa.com"
          type="ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l"
          value={form.ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l}
          onChange={(value) => setForm((prev) => ({ ...prev, ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l: value }))}
          autoComplete="ema [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) l"
          requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red
        />
        <TextF [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) eld
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red
        />
        <TextF [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) eld
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red
        />
      </d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) v>
      <d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) v className="relat [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ve mt-4">
        <label className="sr-only" htmlFor="company">
          N [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) o preencher
        </label>
        < [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) nput
           [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) d="company"
          name="company"
          tab [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opac [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ty-0"
        />
      </d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) v>
      <d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) v className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-med [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) um text-slate-700"
        >
          Mensagem
        </label>
        <textarea
           [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) d="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-wh [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) te px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ne-none focus:r [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng-2 focus:r [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red
        />
      </d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) v>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          ar [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) a-l [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ve="pol [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) te"
        >
          {feedback}
        </p>
      )}
      <button
        type="subm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t"
        className="mt-6  [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) nl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ne-flex w-full  [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) tems-center just [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) fy-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-sem [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) bold uppercase track [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng-w [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) de text-slate-900 shadow-lg shadow-brand-orange/30 trans [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) t [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) on hover:-translate-y-0.5 hover:shadow-xl focus-v [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) s [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ble:outl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ne focus-v [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) s [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ble:outl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ne-2 focus-v [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) s [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ble:outl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ne-offset-2 focus-v [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) s [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ble:outl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ne-brand-orange d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) sabled:cursor-not-allowed d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) sabled:opac [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ty-60"
        d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) sabled={status === "load [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng"}
      >
        {status === "load [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng" ? "Env [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ando..." : subm [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) tLabel}
        <F [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ArrowR [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ght ar [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) a-h [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) dden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextF [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) eldProps = {
  label: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  name: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  value: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  onChange: (value: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng) => vo [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) d;
  placeholder?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  type?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  autoComplete?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  pattern?: str [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng;
  requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red?: boolean;
};

funct [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) on TextF [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) eld({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red,
}: TextF [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) eldProps) {
  return (
    <d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) v className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-med [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) um text-slate-700"
      >
        {label}
      </label>
      < [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) nput
         [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) d={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red={requ [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) red}
        className="rounded-2xl border border-slate-200 bg-wh [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) te px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outl [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ne-none focus:r [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng-2 focus:r [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) ng-brand-orange/40"
      />
    </d [Text.Encoding]::UTF8.GetString([Text.Encoding]::Default.GetBytes('use client';

import { FormEvent, useState } from "react";
import { FiArrowRight } from "react-icons/fi";

type FormState = {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
  honeypot: string;
};

type SubmissionStatus = "idle" | "loading" | "success" | "error";

const initialState: FormState = {
  name: "",
  email: "",
  phone: "",
  subject: "",
  message: "",
  honeypot: "",
};

const apiBaseUrl =
  process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/$/, "") ?? "";
const LEAD_ENDPOINT = `${apiBaseUrl}/api/lead`;

type ContactFormProps = {
  defaultSubject?: string;
  subjectLabel?: string;
  subjectPlaceholder?: string;
  messagePlaceholder?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  context?: string;
};

export default function ContactForm({
  defaultSubject = "",
  subjectLabel = "Assunto",
  subjectPlaceholder = "Como podemos ajudar?",
  messagePlaceholder = "Conte um pouco sobre o seu cenário atual e objetivos.",
  submitLabel = "Enviar mensagem",
  successMessage = "Recebemos sua mensagem! Em breve entraremos em contato.",
  errorMessage = "Não foi possível enviar sua mensagem. Tente novamente em instantes.",
  context,
}: ContactFormProps) {
  const createInitialFormState = () =>
    ({
      ...initialState,
      subject: defaultSubject,
    }) satisfies FormState;

  const [form, setForm] = useState<FormState>(() => createInitialFormState());
  const [status, setStatus] = useState<SubmissionStatus>("idle");
  const [feedback, setFeedback] = useState<string>("");

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    if (form.honeypot.trim()) {
      // Honeypot preenchido indica provável bot; não envia.
      return;
    }

    setStatus("loading");
    setFeedback("");

    try {
      const response = await fetch(LEAD_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: form.name,
          email: form.email,
          phone: form.phone,
          subject: form.subject,
          message: form.message,
          context,
        }),
      });

      if (!response.ok) {
        throw new Error(`API retornou status ${response.status}`);
      }

      setStatus("success");
      setFeedback(successMessage);
      setForm(createInitialFormState());
    } catch (error) {
      console.error("Falha ao enviar lead:", error);
      setStatus("error");
      setFeedback(errorMessage);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="rounded-3xl border border-slate-200 bg-white p-8 shadow-lg shadow-slate-200/60"
    >
      <div className="grid gap-4 md:grid-cols-2">
        <TextField
          label="Nome"
          name="name"
          placeholder="Seu nome completo"
          value={form.name}
          onChange={(value) => setForm((prev) => ({ ...prev, name: value }))}
          autoComplete="name"
          required
        />
        <TextField
          label="E-mail"
          name="email"
          placeholder="voce@empresa.com"
          type="email"
          value={form.email}
          onChange={(value) => setForm((prev) => ({ ...prev, email: value }))}
          autoComplete="email"
          required
        />
        <TextField
          label="Telefone"
          name="phone"
          placeholder="(11) 99999-9999"
          value={form.phone}
          onChange={(value) => setForm((prev) => ({ ...prev, phone: value }))}
          autoComplete="tel"
          pattern="^\\+?[0-9 ()-]{8,}$"
          required
        />
        <TextField
          label={subjectLabel}
          name="subject"
          placeholder={subjectPlaceholder}
          value={form.subject}
          onChange={(value) => setForm((prev) => ({ ...prev, subject: value }))}
          required
        />
      </div>
      <div className="relative mt-4">
        <label className="sr-only" htmlFor="company">
          Não preencher
        </label>
        <input
          id="company"
          name="company"
          tabIndex={-1}
          autoComplete="off"
          value={form.honeypot}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, honeypot: event.target.value }))
          }
          className="absolute h-0 w-0 opacity-0"
        />
      </div>
      <div className="mt-4">
        <label
          htmlFor="message"
          className="mb-2 block text-sm font-medium text-slate-700"
        >
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          placeholder={messagePlaceholder}
          rows={5}
          className="w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
          value={form.message}
          onChange={(event) =>
            setForm((prev) => ({ ...prev, message: event.target.value }))
          }
          required
        />
      </div>
      {feedback && (
        <p
          className={`mt-4 text-sm ${
            status === "error" ? "text-red-500" : "text-brand-green"
          }`}
          role="status"
          aria-live="polite"
        >
          {feedback}
        </p>
      )}
      <button
        type="submit"
        className="mt-6 inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-orange px-6 py-3 text-sm font-semibold uppercase tracking-wide text-slate-900 shadow-lg shadow-brand-orange/30 transition hover:-translate-y-0.5 hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-orange disabled:cursor-not-allowed disabled:opacity-60"
        disabled={status === "loading"}
      >
        {status === "loading" ? "Enviando..." : submitLabel}
        <FiArrowRight aria-hidden="true" className="text-base" />
      </button>
    </form>
  );
}

type TextFieldProps = {
  label: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  type?: string;
  autoComplete?: string;
  pattern?: string;
  required?: boolean;
};

function TextField({
  label,
  name,
  value,
  onChange,
  placeholder,
  type = "text",
  autoComplete,
  pattern,
  required,
}: TextFieldProps) {
  return (
    <div className="flex flex-col">
      <label
        htmlFor={name}
        className="mb-2 block text-sm font-medium text-slate-700"
      >
        {label}
      </label>
      <input
        id={name}
        name={name}
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={placeholder}
        type={type}
        autoComplete={autoComplete}
        pattern={pattern}
        required={required}
        className="rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm text-slate-900 placeholder:text-slate-400 focus:border-brand-orange focus:outline-none focus:ring-2 focus:ring-brand-orange/40"
      />
    </div>
  );
}
)) v>
  );
}





